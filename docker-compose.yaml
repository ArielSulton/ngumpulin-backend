services:
  fastapi-app:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    dns:
      - 8.8.8.8
      - 8.8.4.4
    depends_on:
      - postgres
      - mlflow
    volumes:
      - ./app:/app/app
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=8000"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  adminer:
    image: adminer
    restart: always
    ports:
      - "8088:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
      - ADMINER_DESIGN=dracula
    depends_on:
      - postgres
    networks:
      - backend-network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - backend-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3030:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_UNIFIED_ALERTING_ENABLED=true
      - GF_INSTALL_PLUGINS=grafana-lokiexplore-app
    dns:
      - 8.8.8.8
      - 8.8.4.4
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - backend-network

  mlflow:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    command: mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri postgresql://postgres:postgres@postgres:5432/mlflow
    ports:
      - "5000:5000"
      - "8001:8001"
    environment:
      - MLFLOW_TRACKING_URI=postgresql://postgres:postgres@postgres:5432/mlflow
      - PYTHONPATH=/app
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - mlflow-data:/mlflow
      - ./monitoring/prometheus:/app/monitoring/prometheus
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    dns:
      - 8.8.8.8
      - 8.8.4.4

  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    command: airflow webserver
    ports:
      - "8080:8080"
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql://postgres:postgres@postgres:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW__CORE__FERNET_KEY}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW__WEBSERVER__SECRET_KEY}
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      mlflow:
        condition: service_healthy
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    networks:
      - backend-network
    dns:
      - 8.8.8.8
      - 8.8.4.4

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    command: airflow scheduler
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql://postgres:postgres@postgres:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW__CORE__FERNET_KEY}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW__WEBSERVER__SECRET_KEY}
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      mlflow:
        condition: service_healthy
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    networks:
      - backend-network
    dns:
      - 8.8.8.8
      - 8.8.4.4

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: airflow,mlflow,fastapi
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgresql.sh:/docker-entrypoint-initdb.d/init-postgresql.sh
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

networks:
  backend-network:
    driver: bridge

volumes:
  postgres_data:
  prometheus-data:
  grafana-data:
  mlflow-data: